{"version":3,"sources":["Components/FeeedbackOptions/FeedbackOptions.js","Components/Section/Section.js","Components/Notification/Notification.js","Components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js","Components/FeeedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","onLeaveFeedback","options","map","option","type","name","className","s","btn","onClick","Section","title","children","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","useState","setGood","setNeutral","setBad","feedbacks","countTotalFeedback","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","e","currentTarget","g","n","b","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PAGe,SAASA,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,QACzD,OACE,mCACGA,EAAQC,KAAI,SAAAC,GAAM,OACjB,wBAEEC,KAAK,SACLC,KAAMF,EACNG,UAAWC,IAAEC,IACbC,QAAST,EALX,SAOGG,GANIA,QCNA,SAASO,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,6BAAKD,IACJC,KCJQ,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,ICAE,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,qCACE,4CACCD,EAAQ,EACP,+BACE,wCAAWH,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,UAGF,cAACP,EAAD,CAAcC,QAAQ,yBCjBf,SAASO,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBN,EADqB,KACfO,EADe,OAEED,mBAAS,GAFX,mBAErBL,EAFqB,KAEZO,EAFY,OAGNF,mBAAS,GAHH,mBAGrBJ,EAHqB,KAGhBO,EAHgB,KAKtBC,EAAY,CAACV,EAAMC,EAASC,GAE5BS,EAAqB,WACzB,OAAOD,EAAUE,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,IAGjDC,EAAkC,WACtC,OAAOC,KAAKC,MAAOjB,EAAOW,IAAwB,MAsBpD,OACE,mCACE,eAACjB,EAAD,CAASC,MAAM,wBAAf,UACE,cAACZ,EAAD,CACEE,QAlCQ,CAAC,OAAQ,UAAW,OAmC5BD,gBAxBmB,SAAAkC,GACzB,OAAQA,EAAEC,cAAc9B,MACtB,IAAK,OACHkB,GAAQ,SAAAa,GAAC,OAAIA,EAAI,KACjB,MAEF,IAAK,UACHZ,GAAW,SAAAa,GAAC,OAAIA,EAAI,KACpB,MAEF,IAAK,MACHZ,GAAO,SAAAa,GAAC,OAAIA,EAAI,KAChB,MAEF,QACE,WAWA,cAACvB,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOQ,IACPP,mBACEW,IAAoC,EAChCA,IACA,SCtDhB,IAYeQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC7B,EAAD,MAEF8B,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,IAAM,gC","file":"static/js/main.5d82f1b3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nexport default function FeedbackOptions({ onLeaveFeedback, options }) {\r\n  return (\r\n    <>\r\n      {options.map(option => (\r\n        <button\r\n          key={option}\r\n          type=\"button\"\r\n          name={option}\r\n          className={s.btn}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport Notification from '../Notification/Notification';\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <>\r\n      <h2>Statistics</h2>\r\n      {total > 0 ? (\r\n        <ul>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bad: {bad}</li>\r\n          <li>Total: {total}</li>\r\n          <li>Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import { useState } from 'react';\nimport FeedbackOptions from './Components/FeeedbackOptions/FeedbackOptions';\nimport Section from './Components/Section/Section';\nimport Statistics from './Components/Statistics/Statistics';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const options = ['good', 'neutral', 'bad'];\n  const feedbacks = [good, neutral, bad];\n\n  const countTotalFeedback = () => {\n    return feedbacks.reduce((acc, value) => acc + value, 0);\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100);\n  };\n\n  const handleBtnIncrement = e => {\n    switch (e.currentTarget.name) {\n      case 'good':\n        setGood(g => g + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(n => n + 1);\n        break;\n\n      case 'bad':\n        setBad(b => b + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={options}\n          onLeaveFeedback={handleBtnIncrement}\n        />\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          positivePercentage={\n            countPositiveFeedbackPercentage() > 0\n              ? countPositiveFeedbackPercentage()\n              : 0\n          }\n        />\n      </Section>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__33WO6\"};"],"sourceRoot":""}